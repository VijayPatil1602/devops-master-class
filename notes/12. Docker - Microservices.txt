
---------------------------------------------------------
https://github.com/VijayPatil1602/devops-master-class

https://hub.docker.com/u/in28min

-------------------------------------------------------

check the projets folder in 

	/devops-master-class-master/projets/
		there are java, nodejs, python simple projets

The default networking mode in Docker is bridge network.


Docker with Microservices :>

	
	* docker run -p 8000:8000 --name=currency-exchange in28min/currency-exchange
	  :0.0.1-RELEASE
	* docker run -d -p 8000:8000 --name=currency-exchange in28min/currency-exchange
	  :0.0.1-RELEASE

	* http://localhost:8000/currency-exchange/from/USD/to/INR
	* container logs -f (id of the container )
	* docker network ls
	* docker network inspect bridge
	* docker rm (id of the container )
	* docker network create currency-network
	* docker container stop (id or name of the container)
	* docker rm (id or name of the container )
	* docker run -p 8000:8000 --name=currency-exchange --network=currency-network
	  in28min/currency-exchange:0.0.1-RELEASE






Create yml file using docker compose tool
		      -------------------


version: '3.7'
services:
  currency-exchange:
    image: in28min/currency-exchange:0.0.1-RELEASE
    ports:
      - "8000:8000"
    restart: always
    networks:
      - currency-compose-network

  currency-conversion:
    image: in28min/currency-conversion:0.0.1-RELEASE
    ports:
      - "8100:8100"
    restart: always
    environment:
      CURRENCY_EXCHANGE_SERVICE_HOST: http://currency-exchange
    depends_on:
      - currency-exchange
    networks:
      - currency-compose-network
  
# Networks to be created to facilitate communication between containers
networks:
  currency-compose-network:



then in cmd :>

	* docker container stop (id of the container)
	* docker-compose --version
	* pwd
	* cd to present working directory
	* like (cd ../../microservices/
	* ls (you will able to see docker-compose.yml file)
	* docker-compose up ( its going to run the container using
				the yml file commands or code)	

	* docker-compose up -d(dettached mode)
	* docker container ls
	* docker network ls
	* docker-compose down ( to stop the containers which are running)
	* docker system prune -a
	* docker system df
	* docker-compose confige ( used to validate or check the error in yml file)
	* docker-compose images
	* docker-compose ps ( to list down the containers )
	* docker-compose top
	* docker-compose pause
	* docker-compose unpause
	* docker-compose stop
	* docker-compose kill




































