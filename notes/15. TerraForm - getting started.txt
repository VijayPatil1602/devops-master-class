
---------------------------------------------------------
https://github.com/VijayPatil1602/devops-master-class

https://github.com/VijayPatil1602/devops-master-class/tree/master/kubernetes

https://hub.docker.com/u/in28min


terraform installation instruction
https://cloudkatha.com/how-to-install-terraform-on-windows-system/#:~:text=Step%201%3A%20Download%20Terraform%20Binary%20Package%20Navigate%20to,choose%20386%20if%20your%20system%20is%2032%20bits.

-------------------------------------------------------

AWS terraform 

--- prerequisites
   1. AWS Account
   2. Visual Studio Code
   3. Terraform installation -- search for install terraform

 * TerraForm is an ICC tool, infrastructure ask code tool.
 * TerraForm is typically used to provisioned resources on the cloud.
 * You can provision virtual servers, you can provisioned load balancers, you can
   provision storage, you can provision databases.
 * Typically, TerraForm is used to do server provisioning.
 * TerraForm also provides a few basic features to do so with configuration,
   but typically the best practice is to use TerraForm for server provisioning.
 * Infrastructure as code (IaC) tools allow you to manage infrastructure with 
   configuration files rather than through a graphical user interface. 
   IaC allows you to build, change, and manage your infrastructure in a safe, 
   consistent, and repeatable way by defining resource configurations that you can 
   version, reuse, and share.


 * Providers define individual units of infrastructure, for example compute instances 
   or private networks, as resources. You can compose resources from different 
   providers into reusable Terraform configurations called modules, and manage 
   them with a consistent language and workflow.
   
 * Terraform's configuration language is declarative, meaning that it describes  
   the desired end-state for your infrastructure, in contrast to procedural 
   programming languages that require step-by-step instructions to perform tasks. 
   Terraform providers automatically calculate dependencies between resources to
   create or destroy them in the correct order.



https://www.terraform.io/downloads
https://github.com/in28minutes/devops-master-class/tree/master/terraform#commands-executed


After installation in cmd hit
-------https://cloudkatha.com/how-to-install-terraform-on-windows-system/#:~:text=Step%201%3A%20Download%20Terraform%20Binary%20Package%20Navigate%20to,choose%20386%20if%20your%20system%20is%2032%20bits.


	* terraform --version
	* terraform init ( in cmd go to the folder where .tf file is present and then
				hit this cmd. it will install platform plugin )
	* 

brew install terraform
terraform --version
terraform version
terraform init
export AWS_ACCESS_KEY_ID=*******
export AWS_SECRET_ACCESS_KEY=*********
terraform plan
terraform console
terraform apply -refresh=false
terraform plan -out iam.tfplan
terraform apply "iam.tfplan"
terraform apply -target=aws_iam_user.my_iam_user
terraform destroy
terraform validate
terraform fmt
terraform show
export TF_VAR_iam_user_name_prefix = FROM_ENV_VARIABLE_IAM_PREFIX
export TF_VAR_iam_user_name_prefix=FROM_ENV_VARIABLE_IAM_PREFIX
terraform plan -refresh=false -var="iam_user_name_prefix=VALUE_FROM_COMMAND_LINE"
terraform apply -target=aws_default_vpc.default
terraform apply -target=data.aws_subnet_ids.default_subnets
terraform apply -target=data.aws_ami_ids.aws_linux_2_latest_ids
terraform apply -target=data.aws_ami.aws_linux_2_latest
terraform workspace show
terraform workspace new prod-env
terraform workspace select default
terraform workspace list
terraform workspace select prod-env




































