
---------------------------------------------------------
https://github.com/VijayPatil1602/devops-master-class
-------------------------------------------------------

check the projets folder in 

	/devops-master-class-master/projets/
		there are java, nodejs, python simple projets


cmd --> in cmd or terminal , select project folder then hit to build image

	* docker build -t ( tag ) in28min/hello-world-java:0.0.2.RELEASE . (Current folder)
        * docker build -t in28min/hello-world-java:0.0.2.RELEASE .
        * docker run -p 5000:5000 -d in28min/hello-world-java:0.0.2.RELEASE
        * docker logs -f (id of the container)


**** push the build image to docker hub

	* docker push in28min(docker id)/hello-world-java(project name):0.0.2.RELEASE
	* docker push in28min/hello-world-java:0.0.2.RELEASE



-----------------------------------------------------------------
#     Java Contains a 2 stage build....
#     First we need to create JAR file in java application.


# Build a JAR File
FROM maven:3.8.2-jdk-8-slim AS stage1
WORKDIR /home/app
COPY . /home/app/
RUN mvn -f /home/app/pom.xml clean package

# Create an Image
FROM openjdk:8-jdk-alpine
EXPOSE 5000
COPY --from=stage1 /home/app/target/hello-world-java.jar hello-world-java.jar
ENTRYPOINT ["sh", "-c", "java -jar /hello-world-java.jar"]



------------------------for java spring boot application ------------------------------


# this is the base image
FROM maven:3.8.2-jdk-8-slim AS stage1  
			   //// now here we want to start with a image which already 
			   contains java or maven in it, and we are using java jdk 8 here.
			   this alpine in here is a specific version of Linux which
			   is really really good to use with docker images. this is not
			   the complete version of linux, This is a toned down version
			   of linux which is very very small in size, and which can be
			   used to build your Docker image.


# working directory for specific application
WORKDIR /home/app     ////  this is the working directory. which going to be created by 
		      docker



# for copying the code
COPY . /home/app/     ////  this line copy the code to working directory(app). and in this case
		      code is available in same folder to we add ( . ) here.
		      this means like copy all the files form the current directory,
		      from the . directory, to the /app folder



# to run this application we need this line
RUN mvn -f /home/app/pom.xml clean package
			  /////  we would need to download and install
			  dependencies, and the most popular tool to 
   		          manage dependencies.
   





FROM openjdk:8-jdk-alpine



EXPOSE 5000        ////  we want expose the port 4000. As we looked at earlier i launch
			 that by we are exposing on port 5000 to the outside word.



COPY --from=stage1 /home/app/target/hello-world-java.jar hello-world-java.jar

		  //// this is the 2nd stage here are taking the JAR file of 
		       1st stage

ENTRYPOINT ["sh", "-c", "java -jar /hello-world-java.jar"]




---------------------------------------------------------------


















